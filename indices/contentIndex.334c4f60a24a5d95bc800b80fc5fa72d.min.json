{"/":{"title":"","content":"1. [[Structure/Setup/Initial state]]\n2. [[Structure/Take step/Step]]\n\n","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Agents/AMM":{"title":"","content":"","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Agents/App-developers":{"title":"","content":"","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Agents/Investors":{"title":"","content":"","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Agents/Operators":{"title":"","content":"","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Agents/Treasury":{"title":"","content":"","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Setup/Initial-state":{"title":"","content":"time -\u003e 0\n\n[[../Agents/App developers]] staking -\u003e 0\n\n[[../Agents/Operators]] rewards -\u003e 0\n\n[[../Agents/Treasury]] tokens -\u003e 0\n\n[[../Agents/Treasury]] USD -\u003e 0\n\n[[../Agents/Investors]] tokens -\u003e 0\n\n[[../Agents/Investors]] vested tokens -\u003e 0\n\n[[../Agents/Treasury]] vested tokens -\u003e 0\n\nUpdate vesting with [[../Take step/Vesting/Update vesting]] at time step = 1\n\tThis changes _investor vested tokens_, _treasury vested tokens_, _investor tokens_ and _treasury_tokens_\n\n[[../Agents/Investors]] liquidity provided -\u003e _investor tokens_ Â· investor liquidity ratio (hypothesis)\n\nRemove tokens from last line from _[[../Agents/Investors]] tokens_\n\nRemove tokens calculated with [[../Take step/AMM/Provide liquidity]] from _[[../Agents/Investors]] tokens_\n\nRemove tokens calculated with [[../Take step/AMM/Provide liquidity]] from _[[../Agents/Treasury]] tokens_\n\ntoken TWAP -\u003e 0\n\nmrr -\u003e 0\n\n[[../Agents/Investors]] valuation -\u003e 0\n\n[[../Agents/App developers]] will but discounts -\u003e True","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Structure/Take-step/DAUs/Update-DAUs":{"title":"","content":"","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/AMM/Operate-token":{"title":"","content":"Sells or buys the input tokens","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/AMM/Provide-liquidity":{"title":"","content":"","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/App-developers/Staked-tokens":{"title":"","content":"DAUs -\u003e $D(t)$\n\nStaking period length -\u003e $\\Delta t_s$\n\nMax DAUs in staking period -\u003e \n$$\nD_s = \\max_{T \u003e t - \\Delta t_s ; T \u003c t} D(T)\n$$\n\nStaked tokens per DAU discount -\u003e $d$\n\nDiscount efficiency -\u003e $e ; e \\ge 0 ; e \\le 1$\n\nStaking average duration -\u003e $\\Delta t_s$\n\nPrice limit -\u003e $P_l = \\frac{P \\cdot \\Delta t_s}{2 d}$\n\nMinimum tokens to get discount -\u003e $T_m = D_s \\cdot e \\cdot d$\n\nIf $T_m \u003c T_d$:\n\tThe [[../../Agents/App developers]] sell tokens so $T_d = T_m$\n\nIf $T_m \u003e T_d$ and $P \u003c P_l$ and $T_a \u003e T_m - T_d$:\n\tThe [[../../Agents/App developers]] buy tokens so $T_d = T_m$\n\n(This is actually done at [[../Burning/Burn tokens]] in the simulation)","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Burning/Burn-tokens":{"title":"","content":"Updates [[../../Agents/App developers]] staked tokens taking the discount into account (amount from [[../App developers/Staked tokens]])\n\nCalculates the USD value that the developers should burn to service the users from the DAUs, credit price and fraction of a day passed in the time step\n\nUndiscounted value in dollars to burn -\u003e $B_{\\$,0} = U \\cdot P_c \\cdot \\frac{\\Delta t}{24 \\cdot 3600}$\n\nThe [[../../Agents/App developers]] buy the amount of tokens to burn from the [[../../Agents/AMM]]\n\nAdds the burnt tokens to the variable tracking the amount of tokens burnt since last minting\n\nAdds the burnt tokens to the variable tracking the amount of tokens burnt since the start of the simulation","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/DAUs/DAU-evolution":{"title":"","content":"## Grow and stagnate\n\nIn this model, the DAUs grow with a base rate at the beginning and steadily reduce their growth until they asymptotically approach the DAUs at saturation value\n\nSaturation time -\u003e $d_s$\n\nBase DAUs acquisition per second -\u003e $b$\n\nInitial DAUs -\u003e $U_0$\n\nDAUs at saturation -\u003e $U_s$\n\nSaturation factor:\n\n$$\ns = \\frac{U_s - bt_s - U_0}{t_s^2}\n$$\n\nDAUs at time t:\n\n$$\nU(t) = st^2 + bt + U_0\n$$\n\n## Grow, peak and decrease\n\nIn this model the DAUs grow until they reach a peak and then gradually decline\n\nInitial DAUs -\u003e $U_0$\n\nDAUs at peak -\u003e $U_p$\n\nFinal DAUs -\u003e $U_f$\n\nPeak time -\u003e $t_p$\n\nTime to decrease -\u003e $t_d$\n\n$t \u003c t_p$\n\n$$\nU(t) = \\frac{U_0 \\left(U_p - U_0\\right)  \\left[1 - \\cos\\left(\\frac{t}{t_p}\\pi\\right)\\right]}{2}\n$$\n\n$t \u003e t_p ; t \u003c t_p + t_d$\n\n$$\nU(t) = \\frac{U_p - (U_p - U_f) * \\left[1 - \\cos\\left(\\frac{t - t_p}{t_d}\\pi\\right)\\right]}{2}\n$$\n$t \\geq t_p + t_d$\n\n$$\nU(t) = U_f\n$$\n\n","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/DAUs/Update-DAUs":{"title":"","content":"Round up the [[DAU evolution]] result\n\nUpdate network [[../Network/Daily revenue]]\n\nUpdate [[../App developers/Staked tokens]] by [[../../Agents/App developers]]\n\nUpdate MRR from average daily revenue\n\nUpdate [[../../Agents/Investors]] valuation -\u003e $V_i = MRR*V_m$\n","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Liquidity/Update-liquidity-provision":{"title":"","content":"Gets tokens provided by [[../../Agents/Treasury]] and removes them from the [[../../Agents/Treasury]] total tokens\n\nGets tokens provided by [[../../Agents/Investors]] and removes them from the [[../../Agents/Investors]] total tokens\n\n[[../../Agents/Treasury]] liquidity provided -\u003e $L_t$\n\n[[../../Agents/Investors]] liquidity provided -\u003e $L_i$\n\n[[../../Agents/Treasury]] liquidity provided ratio -\u003e $R_t$\n\n[[../../Agents/Investors]] liquidity provided ratio -\u003e $R_i$\n\nChange in liquidity provided by [[../../Agents/Treasury]] -\u003e $\\Delta L_t = T_t \\cdot R_t  - L_t$\n\nChange in liquidity provided by [[../../Agents/Investors]] -\u003e $\\Delta L_i = T_i \\cdot R_i - L_i$\n\nIf $\\Delta L_t \u003e 0$:\n\tThe [[../../Agents/Treasury]] adds tokens to the [[../../Agents/AMM]] liquidity pool\nIf $\\Delta L_i \u003e 0$\n\tThe [[../../Agents/Investors]] add tokens to the [[../../Agents/AMM]] liquidity pool","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Metrics":{"title":"","content":"### The metrics have the following fields:\n\n- time\n\t- Time elapsed since the start of the simulation\n- years\n\t- Years passed since the start of the simulation\n- day\n\t- Current day since the start of the simulation (simulation starts at day 1)\n- price\n\t- Current marginal price in the [[../Agents/AMM]] (token price)\n- daus\n\t- Current daily active users\n- num_operators_decentralized\n\t- Current number of decentralized [[../Agents/Operators]]\n- num_operators_centralized\n\t- Current number of centralized [[../Agents/Operators]]\n- total_staked\n\t- Amount of tokens staked by the [[../Agents/Operators]] and [[../Agents/App developers]]\n- operator_staked\n\t- Amount of tokens staked by the [[../Agents/Operators]]\n- developer_staked\n\t- Amount of tokens staked by the [[../Agents/App developers]]\n- burnt_tokens\n\t- Amount of tokens burnt since the last minting\n- step_burnt tokens\n\t- Amount of tokens burnt in the current step\n- total_burnt_tokens\n\t- Amount of tokens burnt since the start of the simulation\n- minted_tokens\n\t- Amount of tokens minted in the last minting period\n- step_minted_tokens\n\t- Amount of tokens minted in the current step\n- total_minted_tokens\n\t- Amount of tokens minted since the start of the simulation\n- rewars_value_per_operator\n\t- Rewards per node in the current step\n- costs_per_operator\n\t- Costs per operator in the current step\n- profit_per_operator\n\t- Profit per operator in the current step\n- pool_token\n\t- Current amount of tokens in the [[../Agents/AMM]] pool\n- pool_usd\n\t- Current amount of USDs in the [[../Agents/AMM]] pool\n- total_supply\n\t- Current amount of existing tokens\n- circulating_supply\n\t- Current amount of circulating tokens (all vested and minted minus burnt)\n- treasury_tokens\n\t- Current amount of tokens held by the [[../Agents/Treasury]]\n- investor_tokens\n\t- Current amount of tokens held by the [[../Agents/Investors]]\n- developers_will_buy_discounts\n\t- Boolean state to show if the developers are currently willing to buy tokens to get discounts (I'm not 100% sure on this, might need to check)\n- prospective_yield\n\t- Yield that an operator would had gotten if they had entered the network in the previous step\n- new_operators\n\t- Amount of new operators in the current step\n- flow_bought_developer_staking_tokens\n\t- Amount of tokens bought by the [[../Agents/App developers]] for staking in the current step\n- flow_bought_operator_staking_tokens\n\t- Amount of tokens bought by the [[../Agents/Operators]] for staking in the current step\n- flow_bought_investor_tokens\n\t- Amount of tokens bought by the [[../Agents/Investors]] in the current step\n- flow_bought_burn_tokens\n\t- Amount of tokens bought to be burned in the current step\n- flow_sold_treasury_tokens\n\t- Amount of tokens sold by the [[../Agents/Treasury]] in the current step\n- flow_sold_operator_rewards_tokens\n\t- Amount of tokens sold by the [[../Agents/Operators]] for the network rewards in the current step\n- flow_bought_developer_staking_usd\n\t- USD spent by the [[../Agents/App developers]] in the current step to buy the tokens necessary for staking in the current step\n- flow_bought_operator_staking_usd\n\t- USD spent by the [[../Agents/Operators]] in the current step to buy the tokens necessary for staking in the current step\n- flow_bought_investor_usd\n\t- USD spent by the [[../Agents/Investors]] in the current step to buy tokens in the current step\n- flow_bought_burn_usd\n\t- USD spent to buy tokens to be burned in the current step\n- flow_sold_treasury_usd\n\t- USD earned by the [[../Agents/Treasury]] from selling tokens in the current step\n- flow_sold_operator_rewards_usd\n\t- USD earned by the [[../Agents/Operators]] from selling their rewards in the current step\n- mint_burn_ratio\n\t- Ratio of tokens minted for each burned token in the current step\n- mrr\n\t- Current MRR of the network\n- investor_valuation_based_token_price\n\t- Current perceived token valuation by the [[../Agents/Investors]]\n- valuation_cap\n\t- Current value of the total supply of tokens according to the [[../Agents/AMM]] marginal price\n- investor_valuation\n\t- Current yotal valuation of the project by the [[../Agents/Investors]]\n- incentives\n\t- Incentives given by the treasury to the [[../Agents/Operators]] in the [[Operators/Distribute rewards]] part of the current step\n- incentives_ratio\n\t- Ratio of tokens given by the [[../Agents/Treasury]] to the [[../Agents/Operators]] for each token that the [[../Agents/Treasury]] should have gotten in the [[Operators/Distribute rewards]] part of the current step\n- average_sessions_per_worker\n\t- Average number of concurrent sessions for each node in the current step","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Minting/Mint-tokens":{"title":"","content":"Get the tokens to mint from the [[Minting calculator]]\n\nSet the burnt tokens since the last minting to 0\n\nUpdate the total minted tokens\n\nUpdate the minted tokens since the last minting","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Minting/Minting-calculator":{"title":"","content":"## Constant deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nDeflation rate -\u003e $r$\n\nMinting\n$$\nM(B) = r B\n$$\n\n## Asymptotic mint rate (reused formula)\n\nCurrent value -\u003e $v$\n\nCrosspoint value -\u003e $v_c$\n\nInitial minting rate -\u003e $r_0$\n\nFinal minting rate -\u003e $r_f$\n\nValue ratio -\u003e $v_r(v) = \\frac{v}{v_c}$\n\n$$\nr(v) = \\frac{v_r(v)}{1 + v_r(v)} (r_f - r_0) + r_0\n$$\n\n## Market cap dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nMarket cap crosspoint -\u003e $C_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = C$, $v_c = C_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMintrate\n$$\nM(C,B) = r(C)\\cdot B\n$$\n\n## Burnt tokens dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nBurnt tokens crosspoint -\u003e $B_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = B$, $v_c = B_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMinting\n$$\nM(B) = r(B) \\cdot B\n$$\n\n## Time dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nTime crosspoint -\u003e $t_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = t$, $v_c = t_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMinting\n$$\nM(t,B) = r(t) \\cdot B\n$$\n\n## Time dependent mint rate\n\nTime crosspoint -\u003e $t_c$\n\nInitial mint rate -\u003e $M_0$\n\nFinal mint rate -\u003e $M_f$\n\nAsymptotic mint rate where $v=t$, $v_c = t_c$, $r_0 = M_0$ and $r_f = M_f$\n\nMinting\n$$\nM(t) = r(t)\n$$\n\n## Constant mint rate\n\nMint rate -\u003e $M$\n\nMinting\n$$\nM(t) = M\n$$\n\n## Constant deflation rate with minimum\n\nMinimum mint rate -\u003e $M$\n\nBurnt tokens since last minting -\u003e $B$\n\nDeflation rate -\u003e $r$\n\nMinting\n$$\nM(B) = \\max \\{M, rB\\}\n$$\n\n## Split minting calculator\n\nMinting calculators -\u003e $\\{M_i\\}$\n\nStarting times -\u003e $\\{t_i\\}$\n\nMinting calculator contribution\n- $t \u003e t_i ; t \u003c t_{i+1}$\n\t- $c_i = 1$\n- else\n\t- $c_i = 0$\n\nMinting calculator\n$$\nM = \\sum c_iM_i\n$$\n\n## Changing minting calculator\n\nMinting calculators -\u003e $\\{M_i\\}$\n\nStarting times -\u003e $\\{t_i\\}$\n\nRelaxation time -\u003e $\\Delta t_r$\n\nMinting calculator contribution\n\n- $t \u003e t_{i-i}; t \u003c t_i; t \u003e t_i - \\Delta t_r$\n\t- $c_i = \\frac{t_i - t}{\\Delta t_r}$\n- $t \u003e t_t;t \u003e t_{i+1} - \\Delta t_r$\n\t- $c_i=\\frac{t-(t_{i+1}-\\Delta t_r)}{\\Delta t_r}$\n- $t \u003e t_i;t\u003ct_{i+1}-\\Delta t_r$\n\t- $c_i=1$\n- else\n\t- $c_i=0$\n\nMinting calculator\n$$\nM = \\sum c_iM_i\n$$\n","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Network/Daily-revenue":{"title":"","content":"$$\nr = U \\cdot P_c\n$$","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Operators/Distribute-rewards":{"title":"","content":"From the minted tokens since last minting and the rewards ratio, get the base number of tokens that should go to the [[../../Agents/Treasury]] and the [[../../Agents/Operators]]\n\nMinted tokens -\u003e $m$\nRewards ratio -\u003e $r_r$\n\n[[../../Agents/Treasury]] rewards tokens -\u003e $R_t = m(1-r_r)$\n[[../../Agents/Operators]] rewards tokens -\u003e $R_o = mr_r$\n\nGet the incentives ratio from the [[Incentives schedule]] and use that to calculate the final amount of tokens the [[../../Agents/Treasury]] and [[../../Agents/Operators]] should receive\n\nIncentives ratio -\u003e $r_i$\nIncentives given by [[../../Agents/Treasury]] to [[../../Agents/Operators]] -\u003e $I=r_iR_t$\n\nAdd the [[../../Agents/Treasury]] tokens to the [[../../Agents/Treasury]] total tokens\n\nAdd the [[../../Agents/Operators]] tokens to the [[../../Agents/Operators]] rewards for the current step","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Operators/Evaluate-operator-profits":{"title":"","content":"The [[../../Agents/Operators]] immediately sell the [[../../Agents/Operators]] rewards from to the [[../../Agents/AMM]]\n\nOnly decentralized operators get the rewards, so only they have earnings\n\nSet the [[../../Agents/Operators]] rewards to 0\n\nGet the [[../../Agents/Operators]] network costs from the DAUs, cost per DAU and fraction of a day passed in the time step\n\nDAUs -\u003e $U$\nCost per DAU -\u003e $C$\nFraction of a day passed -\u003e $\\Delta d = \\frac{\\Delta t}{24 \\cdot 3600}$\n\nNetwork costs -\u003e $C_n = CU\\Delta d$\n\nSplit those costs between the centralized and decentralized [[../../Agents/Operators]] using the decentralization factor\n\nDecentralization factor -\u003e $d$\nCentralized costs -\u003e $C_{n,c}$\nDecentralized costs -\u003e $C_{n,d}$\n\nCalculate the fixed node costs from the fixed daily costs (hypothesis)\n\nFixed node costs -\u003e $c_f$\nNumber of decentralized nodes -\u003e $n_d;n_d \\in \\mathbb{R};n_d\u003e0$\nCosts per node -\u003e $c = \\frac{C_{n,d}}{n_d} + c_f$\n\nCalculate the node profits as the difference between the earnings from selling the rewards and the fixed + network costs per node (only for the decentralized nodes)\n\nEarnings -\u003e $E$\nEarnings per node -\u003e $e=\\frac{E}{n_d}$\nProfit per node -\u003e $p = e-c$\n\nThe max network profit is calculated as the [[../../Agents/Operators]] earnings minus the decentralized nodes costs\n\nMax network profit -\u003e $P_{max}=E-C_{n,d}$\n\nWe get the prospective profit as the possible profit per operator if the would've been 1 operator more in this step\n\nProspective profit -\u003e $p_p=\\frac{P_{max}}{n_d+1}-c_f$\n\nThe prospective yield is calculated from taking the prospective profit for a whole year over the current USD value staking for the operator\n\nUSD value staking -\u003e $s$\nProspective yield -\u003e $y_p=p_p\\frac{365}{\\Delta d}\\frac{1}{s}$\n\nIf the prospective profit is below 0,  some of the [[../../Agents/Operators]] want to exit according to the exit ratio (hypothesis), prospective profit (negative) and fraction of a day passed in the time step\n\nThe exits are limited by the number of operators exiting where the prospective profit becomes positive (they no longer have a reason to exit) and the max variation in decentralized [[../../Agents/Operators]] per time step (20%)\n\nExit ratio -\u003e $r_e$\nOperators leaving from exit ratio -\u003e $E_r = r_e p_p \\Delta d$\nOperators that need to leave to reach profitability -\u003e $E_p=n_d - \\frac{P_{max}}{c_f}$\nMax variation in operators -\u003e $E_{max} = 0'2 n_d$\n\nOperators leaving -\u003e $\\min\\{E_r, E_p, E_{max}\\}$\n\nIf the prospective profit is less than the minimum incentivized yield (hypothesis), no new [[../../Agents/Operators]] want to enter, so there is no change\n\nIf the prospective profit is above the minimum incentivized yield, new [[../../Agents/Operators]] want to enter according to the yield eagerness (hypothesis), yield incentive (diff between prospective yield and minimum incentivized yield) and fraction of a day passed in the time step\n\nThe enters are limited by the number of operators entering where the prospective profit becomes less than the minimum incentivized yield (I'm not 100% sure I got the formula right, so this may be wrong), and the max variation in decentralized [[../../Agents/Operators]] per time step (20% + 1 to account for the starting point where there are no decentralized [[../../Agents/Operators]])\n\nYield eagerness -\u003e $r_e$\nMinimum incentivized yield -\u003e $y_{min}$\nYield incentive -\u003e $y_i = y_p - y_{min}$\nOperators entering from yield prospects -\u003e $E_y = r_e y_i \\Delta d$\nOperators that need to enter to have yield below minimum -\u003e $E_p = P_{max}\\left(\\frac{s y_{min}}{365 {\\Delta d}^{-1}} + c_f\\right)$\nMax variation in operators -\u003e $E_{max} = 0'2 n_d$\n\nOperators entering -\u003e $\\min\\{E_y, E_p, E_{max}\\}$\n\nAfter this, we [[Update the number of operators]] (this includes optimizing the staking for the existing operators) and get the change in tokens from it\n\nWe now [[../AMM/Operate token]] for the change in tokens from the [[../../Agents/Operators]] update\n\nIf the centralization objective (design parameter) is not satisfied, new centralized [[../../Agents/Operators]] enter or exit the network to satisfy it (these make no token staking or selling)","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Operators/Incentives-schedule":{"title":"","content":"Sessions per worker -\u003e $s$\nSessions per worker minimum incentivized -\u003e $s_0$\nSessions per worker maximum incentivized -\u003e $s_f$\nMax incentives ratio -\u003e $r_f$\n\n$s \u003c s_0$\n\t$r(s) = 0$\n$s \u003e s_f$\n\t$r(s) = r_f$\n$s \u003e s_0 ; s \u003c s_f$\n\t$r(s) = r_f \\frac{s - s_0}{s_f - s_0}$\n","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Operators/Update-the-number-of-operators":{"title":"","content":"The [[../../Agents/Operators]] leaving sell all their tokens\n\nThe overstaked [[../../Agents/Operators]] sell their surplus of tokens\n\nIf there are enough tokens in the [[../../Agents/AMM]] pool, do the following:\n\nThe undesrtaked [[../../Agents/Operators]] (below the margin from the design parameters) buy new tokens so they're not understaked anymore (buy to the new operator staking, not just to be inside the margin)\n\nThe new [[../../Agents/Operators]] buy tokens to stake\n\nUpdate the number of [[../../Agents/Operators]] and their staking","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Step":{"title":"","content":"time += time_step -\u003e $t_s = t_{s-1} + \\Delta t$\n\n[[../Structure/Take step/DAUs/Update DAUs]]\n\n[[Vesting/Update vesting]]\n\n[[Liquidity/Update liquidity provision]]\n\nApp developers [[Burning/Burn tokens]]\n\nIf the minting interval has passed: [[Minting/Mint tokens]]\n\nToken TWAP is updated\n\nIf the rewards interval has passed: [[Operators/Distribute rewards]] to [[../Agents/Operators]] and then [[Operators/Evaluate operator profits]]\n\n[[Metrics]] are extracted for the step\n","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Treasury/Evaluate-the-market-equilibrium":{"title":"","content":"The [[../../Agents/Treasury]] makes sales to the [[../../Agents/AMM]] according to the [[Treasury sales schedule]] capped by the number of tokens the [[../../Agents/Treasury]] currently holds\n\nThe [[../../Agents/Investors]] buy/sell tokens according to their valuation and the [[../../Agents/AMM]] current token price\n\nThis is modified by the daily rebalancing ratio (hypothesis), the fraction of the day passed in the time step and the amount of tokens that the investors currently hold (when selling)\n\nThe investors then [[../AMM/Operate token]] for that amount\n\nThe amount of tokens held by the [[../../Agents/Investors]] is modified by their acquisitions","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Treasury/Treasury-sales-schedule":{"title":"","content":"","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Vesting/Update-vesting":{"title":"","content":"Get [[../../Agents/Investors]] and [[../../Agents/Treasury]] vested tokens from [[Vesting schedule]]\n\n","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null},"/Structure/Take-step/Vesting/Vesting-schedule":{"title":"","content":"For each actor, we have different vesting schedules, but they all follow the same formula\n\nCliff time -\u003e $\\Delta t_c$\nVesting time -\u003e $\\Delta t_v$\nTotal vesting amount -\u003e $v_t$\nVesting start time -\u003e $t_0$\n\n$t \u003c t_0 + \\Delta t_c$\n$$\nv(t) = 0\n$$\n$t \\ge t_0 + \\Delta t_c ; t \u003c t_0 + \\Delta t_v$\n$$\nv(t) = \\frac{v_t \\cdot \\Delta t_v}{t - t_0}\n$$\n$t \\ge t_0 + \\Delta t_v$\n$$\nv(t) = v_t\n$$\n\n","lastmodified":"2023-01-03T16:15:58.629326872Z","tags":null}}