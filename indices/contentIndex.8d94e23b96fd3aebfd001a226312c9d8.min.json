{"/":{"title":"","content":"# AUKI Tokenomics Simulation\n\nThis documentation describes the simulation of the AUKI tokenomics model available at [https://auki.cenit.finance/](https://auki.cenit.finance/).\nSpecifically, this simulation tests the behaviour of the tokenomics with the initial utility available in the AUKI Hagall network.\n\nThe simulation is written in Python and is designed to test various tokenomics designs and their behavior in a variety of simulated environments.\n\nThe simulation results are dependent upon:\n * A set of design parameters that define the tokenomics model\n * A set of hypotheses that define reasonable assumptions about the simulation environment and the behaviour of agents\n\nIn order to know more about the inner workings of the simulation, please refer to:\n 1. [[Structure/Setup/Initial state|Initial state]]. How the simulation is initialized at the Token Generation Event.\n 2. [[Structure/Take step/Step|Simulation Step]]. How the simulation state changes as it time advances.\n\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Agents/AMM":{"title":"","content":"# Automated Market Maker\n\nThe Automated Market Maker (AMM) is a smart contract that facilitates the exchange of tokens for USD. It is a decentralized exchange that allows users to exchange tokens for USD without the need for a centralized exchange or an order book.\n\nFor the purposes of the simulation, the AUKI token market has ben modeled as a single AMM, which emulates the shared liquidity of all centralized or decentralized exchanges between AUKI and dollar-pegged currencies.\n\n## AMM Pool\n\nThe pool follows a constant product formula, which is a mathematical model that describes the relationship between the amount of tokens and the amount of USD in the pool.\n\n$$\nK = X \\cdot Y\n$$\n\nWhere:\n * $K$: Constant of the AMM that emulates the market\n * $X$: Amount of tokens in the pool\n * $Y$: Amount of USD-pegged currency in the pool\n\nAs long as liquidity remains the same, any tokens can be exchanged for USD at a constant $K$ value. This sets the price of the token in the market.\n\n$$\nX' \\cdot Y' = (X + \\Delta X) \\cdot (Y + \\Delta Y)\n$$\n\n$$\nP = \\dfrac{Y}{X}\n$$\n\nWhere:\n * $X'$: Amount of tokens in the pool after the exchange\n * $Y'$: Amount of USD-pegged currency in the pool after the exchange\n * $\\Delta X$: Amount of tokens exchanged\n * $\\Delta Y$: Amount of USD-pegged currency exchanged\n * $P$: Price of the token in the market","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Agents/App-developers":{"title":"","content":"","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Agents/Investors":{"title":"","content":"","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Agents/Operators":{"title":"","content":"","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Agents/Treasury":{"title":"","content":"","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Setup/Initial-state":{"title":"","content":"# Initial state\n\nThe initial state of the simulation is the Token Generation Event. From this point forwards:\n * The first tokens have been minted and distributed or sold to investors\n * The token economy is live, with a market facilitating the exchange of tokens for USD\n * The token utility is available, with app developers being able to exchange tokens for network credits\n * Vesting schedules for investors and the treasury begin to vest\n * The minting events beggin to occur periodically\n\nMost simulation variables are initialized at this point. Additionally, some specific actions are taken to initialize the simulation environment, described below.\n\n## Network\n\nInitially, no decentralized workers exist in the network. \nThere is an initial number of centralized workers providing the service, which is a design parameter of the simulation.\n\n## Staking\n\nBoth worker operators and app developer stake are initialized to 0.\n\n## Vesting\n\nThe vesting schedules for investors and the treasury are initialized to at time 0.\nThis includes the distribution of some tokens that constitute the initial circulating supply, including the public sale.\n\n## Market\n\nIn the initialization, an [[../Agents/AMM|AMM pool]] is created to act as the simulated market environment.\n\nThere is an initial provision of liquidity to this AMM, set as a percentages of the total tokens avaiable to the investors and the treasury. This initial liquidity is provided at the price point of the public sale, which is therefore the initial price of the token.\n\nBoth the investors and the treasury will try to adjust their liquidity provision to this percentage throughout the simulation, providing liquidity to the market when the percentage is too low and removing liquidity when the percentage is too high.\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/AMM/Operate-token":{"title":"","content":"# Trading\n\nInvestors, including both external agents and those who receive tokens from the vesting schedule, can buy and sell tokens on the market for the purposes of longing/shorting.\n\nThis effect is essentially unpredictable. For the purposes of the simulation, it is assumed that investors take a rational approach when evaluating their investment on the AUKI token, related to its utility demand (app developers buying the token for network credits, and staking), which can be equated to a Monthly Revenue Rate (MRR) for the Hagall network. Therefore, the simulation assumes that investors will buy when the market cap is lower than how they estimate the value of the project based on its MRR, and sell when the market cap is higher than that.\n\n## Calculation\n\nThe amount of tokens bought or sold by investors is calculated as the amount needed to take the token price to the point where the market cap is equal to the estimated project valuation. This is calculated as follows:\n\n$$\nA = X - \\left(K \\cdot \\frac{S}{V} \\right)^{\\frac{1}{2}}\n$$\n\nWhere:\n * $A$: Amount of tokens to be bought or sold\n * $X$: Amount of tokens in the pool\n * $K$: Constant of the AMM that emulates the market\n * $S$: Supply of tokens\n * $V$: Estimated project valuation\n\nHowever, there is an additional limitation. If they sell, investors will not sell more than a certain percentage of their tokens yearly (to simulate the fact that holders and project stakeholders will not want to sell all their tokens at once). This results in:\n\n$$\n\\Delta I = \\min\\left(A, I \\cdot \\left( 1 - (1- r_{s, anual})^{\\Delta t /\\text{seconds in a year}}\\right) \\right)\n$$\n\nwhere\n * $\\Delta I$: Amount of tokens bought or sold by investors in time step $t$\n * $A$: Amount of tokens to be bought or sold to reach the estimated project valuation\n * $I$: Amount of tokens owned by investors\n * $r_{s, anual}$: Anual ratio of tokens to be sold by investors\n * $\\Delta t$: Time step","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/AMM/Provide-liquidity":{"title":"","content":"","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/App-developers/Staked-tokens":{"title":"","content":"# Predictive Staking\n\nApp developers stake tokens to get discounted prices on network credits. The amount of tokens staked is optimized to get the best price for the service they need to cover.\n\nA certain dollar value of tokens staked (one of the design parameters of the tokenomics) for a certain period of time (another design parameter) unlocks a 50% discount on the price of a network credit. \n\nHigher locking periods result in lower token amounts needed for the same discount. This is a complex trade-off for the app developers, and their use of this system will be influenced by many uncontrolled variables. The simulation assumes that, on-average, the app developers use the predictive staking for a certain single locking period (and thus a certain average amount of tokens per network credit discount), and up to a certain efficiency in achieving discounts. Together, they imply the amount of staked tokens they seek.\n\nIt is assumed that the tokens are restaked as long as the app developers need them.\n\n## Staking Calculation\n\nThe desired amount of tokens at time $t$ is calculated as follows:\n\n$$\nS(t) = \\dfrac{U(t) \\cdot e \\cdot d}{P}\n$$\n\nWhere:\n * $S(t)$: Desired amount of tokens staked at time $t$\n * $U(t)$: Amount of daily active users at time $t$\n * $e$: Efficiency in achieving discounts by the app developers, between 0 and 1\n * $d$: Dollar value in tokens for one DAU daily service discount\n * $P$: Token price in dollars\n\nThus, the app developers will want to exchange the following amount of tokens for staking:\n\n$$\n\\Delta S(t) = S(t) - S(t - \\Delta t)\n$$\n\nIf $\\Delta S(t) \u003e 0$, the app developers will need to buy more tokens for staking before proceeding with their next purchase of network credits.\n\nOtherwise, if the app developers have more tokens than they need, they will sell the difference on the market if any of them are unlocked in the period.","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Burning/Burn-tokens":{"title":"","content":"# Burn Tokens\n\nThe app developers burn tokens in exchange for network credits, with which they pay for the service provided by the Hagall network to run their apps. \nThe network credit price is pegged to the dollar, so a higher token price means that the app developers will burn less tokens to pay for the same amount of network credits.\n\nAdditionally, discounts from predictive staking are taken into account as well. Staking can result in discounts of up to 50% per network credit. \n\n## Burn Calculation\n\nFirst of all, staking discounts are taken into account. The amount of discounted serviced DAUs is calculated as follows:\n\n$$\nU_{discounted}(t) = U(t) \\cdot \\min \\left( \\dfrac{S(t)}{d}, 1 \\right)\n$$\n\nWhere:\n  * $U_{discounted}(t)$ -\u003e Amount of DAUs serviced with a discount at time $t$\n  * $U(t)$ -\u003e Amount of daily active users at time $t$\n  * $S(t)$ -\u003e Amount of tokens staked at time $t$\n  * $d$ -\u003e Amount of tokens per DAU single day service discount\n\nThe discounted DAUs are then used to calculate the dollar value of the tokens the app developers need to burn to pay for the service:\n\n$$\nB_{USD}(t) = U_{discounted}(t) \\cdot P_c \\cdot \\Delta t \\cdot \\left(1 - 0.5 \\cdot \\dfrac{U_{discounted}(t)}{U(t)} \\right) \n$$\n\nWhere:\n  * $B_{USD}(t)$ -\u003e The dollar value of the tokens to burn at time $t$\n  * $U_{discounted}(t)$ -\u003e Amount of DAUs serviced with a discount at time $t$\n  * $U(t)$ -\u003e Amount of daily active users at time $t$\n  * $P_c$ -\u003e Price of service for a single DAU (equal to the network credit price if the network credit serves a single DAU)\n  * $\\Delta t$ -\u003e Time step length\n\nFinally, the app developers buy the amount of tokens to burn from the AMM, and burn them.\nThe purchase causes the price of the tokens to increase, and the app developers will need to burn less tokens, but the dollar value will be the same.\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/DAUs/Update-DAUs":{"title":"","content":"# Daily Active Users\n\nThe simulation adops an hypotheses on the evolution of Daily Active Users through time.\nThis evolution is determined by a set of parameters that define the shape of the curve.\n\n## DAUs evolution\n\nCurrently, there are two parameterizations available for the DAUs evolution.\n\n### Grow and stagnate\n\nIn this model, the DAUs grow with a quadratically increasing rate at the beginning and but asymptotically approach the DAUs at saturation value.\n\nSaturation time -\u003e $d_s$\n\nBase DAUs acquisition per second -\u003e $b$\n\nInitial DAUs -\u003e $U_0$\n\nDAUs at saturation -\u003e $U_s$\n\nSaturation factor:\n\n$$\ns = \\frac{U_s - bt_s - U_0}{t_s^2}\n$$\n\nDAUs at time t:\n\n$$\nU(t) = st^2 + bt + U_0\n$$\n\n### Grow, peak and decrease\n\nIn this model the DAUs grow until they reach a peak and then gradually decline\n\nInitial DAUs -\u003e $U_0$\n\nDAUs at peak -\u003e $U_p$\n\nFinal DAUs -\u003e $U_f$\n\nPeak time -\u003e $t_p$\n\nTime to decrease -\u003e $t_d$\n\n$t \u003c t_p$\n\n$$\nU(t) = \\frac{U_0 \\left(U_p - U_0\\right)  \\left[1 - \\cos\\left(\\frac{t}{t_p}\\pi\\right)\\right]}{2}\n$$\n\n$t \u003e t_p ; t \u003c t_p + t_d$\n\n$$\nU(t) = \\frac{U_p - (U_p - U_f) * \\left[1 - \\cos\\left(\\frac{t - t_p}{t_d}\\pi\\right)\\right]}{2}\n$$\n$t \\geq t_p + t_d$\n\n$$\nU(t) = U_f\n$$\n\n\n## Noise on DAUs evolution\n\nIn order to emulate the presence of peaks and valleys in the evolution of DAUs, an optional noise factor can be added to the DAUs evolution.\n\n$$\nU_N(t) = U(t) \\cdot F(t)\n$$\n\nwhere $F(t)$ is a noise factor calculated independently as follows:\n\n$$\nF(t) = i \\cdot F(t-1) + (1-i) \\cdot N(0, \\sigma)\n$$\n\nwhere $N(0, 1)$ is a random number with a normal distribution with mean 0 and standard deviation $\\sigma$, and $i$ is the noise _inertia_ factor, a value between 0 and 1 that determines how much the noise factor is influenced by the previous value, in order to increase or decrease the natural frequency of the noise.\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Liquidity/Update-liquidity-provision":{"title":"","content":"# Liquidity Provision\n\nBoth investors and the treasury are liquidity providers to the AUKI/USD [[../../Agents/AMM]] that acts as the market for the token.\n\nEach of them has a target liquidity provision ratio, which is the percentage of the total tokens available to them that they want to have in the [[../../Agents/AMM]]. Let's call them $R_t$ and $R_i$.\n\nThe calculation of the liquidity provision is done as follows:\n\n * Gets tokens provided by treasury and removes them from the treasury total tokens\n * Gets tokens provided by investors and removes them from the investors total tokens\n * Treasury liquidity provided -\u003e $L_t$\n * Investors liquidity provided -\u003e $L_i$\n * Change in liquidity provided by treasury -\u003e $\\Delta L_t = T_t \\cdot R_t  - L_t$\n * Change in liquidity provided by investors -\u003e $\\Delta L_i = T_i \\cdot R_i - L_i$\n * If $\\Delta L_t \u003e 0$: the treasury adds tokens to the AMM liquidity pool\n * If $\\Delta L_i \u003e 0$ the investors add tokens to the AMM liquidity pool","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Metrics":{"title":"","content":"### The metrics have the following fields:\n\n- time\n\t- Time elapsed since the start of the simulation\n- years\n\t- Years passed since the start of the simulation\n- day\n\t- Current day since the start of the simulation (simulation starts at day 1)\n- price\n\t- Current marginal price in the [[../Agents/AMM]] (token price)\n- daus\n\t- Current daily active users\n- num_operators_decentralized\n\t- Current number of decentralized [[../Agents/Operators]]\n- num_operators_centralized\n\t- Current number of centralized [[../Agents/Operators]]\n- total_staked\n\t- Amount of tokens staked by the [[../Agents/Operators]] and [[../Agents/App developers]]\n- operator_staked\n\t- Amount of tokens staked by the [[../Agents/Operators]]\n- developer_staked\n\t- Amount of tokens staked by the [[../Agents/App developers]]\n- burnt_tokens\n\t- Amount of tokens burnt since the last minting\n- step_burnt tokens\n\t- Amount of tokens burnt in the current step\n- total_burnt_tokens\n\t- Amount of tokens burnt since the start of the simulation\n- minted_tokens\n\t- Amount of tokens minted in the last minting period\n- step_minted_tokens\n\t- Amount of tokens minted in the current step\n- total_minted_tokens\n\t- Amount of tokens minted since the start of the simulation\n- rewars_value_per_operator\n\t- Rewards per node in the current step\n- costs_per_operator\n\t- Costs per operator in the current step\n- profit_per_operator\n\t- Profit per operator in the current step\n- pool_token\n\t- Current amount of tokens in the [[../Agents/AMM]] pool\n- pool_usd\n\t- Current amount of USDs in the [[../Agents/AMM]] pool\n- total_supply\n\t- Current amount of existing tokens\n- circulating_supply\n\t- Current amount of circulating tokens (all vested and minted minus burnt)\n- treasury_tokens\n\t- Current amount of tokens held by the [[../Agents/Treasury]]\n- investor_tokens\n\t- Current amount of tokens held by the [[../Agents/Investors]]\n- developers_will_buy_discounts\n\t- Boolean state to show if the developers are currently willing to buy tokens to get discounts (I'm not 100% sure on this, might need to check)\n- prospective_yield\n\t- Yield that an operator would had gotten if they had entered the network in the previous step\n- new_operators\n\t- Amount of new operators in the current step\n- flow_bought_developer_staking_tokens\n\t- Amount of tokens bought by the [[../Agents/App developers]] for staking in the current step\n- flow_bought_operator_staking_tokens\n\t- Amount of tokens bought by the [[../Agents/Operators]] for staking in the current step\n- flow_bought_investor_tokens\n\t- Amount of tokens bought by the [[../Agents/Investors]] in the current step\n- flow_bought_burn_tokens\n\t- Amount of tokens bought to be burned in the current step\n- flow_sold_treasury_tokens\n\t- Amount of tokens sold by the [[../Agents/Treasury]] in the current step\n- flow_sold_operator_rewards_tokens\n\t- Amount of tokens sold by the [[../Agents/Operators]] for the network rewards in the current step\n- flow_bought_developer_staking_usd\n\t- USD spent by the [[../Agents/App developers]] in the current step to buy the tokens necessary for staking in the current step\n- flow_bought_operator_staking_usd\n\t- USD spent by the [[../Agents/Operators]] in the current step to buy the tokens necessary for staking in the current step\n- flow_bought_investor_usd\n\t- USD spent by the [[../Agents/Investors]] in the current step to buy tokens in the current step\n- flow_bought_burn_usd\n\t- USD spent to buy tokens to be burned in the current step\n- flow_sold_treasury_usd\n\t- USD earned by the [[../Agents/Treasury]] from selling tokens in the current step\n- flow_sold_operator_rewards_usd\n\t- USD earned by the [[../Agents/Operators]] from selling their rewards in the current step\n- mint_burn_ratio\n\t- Ratio of tokens minted for each burned token in the current step\n- mrr\n\t- Current MRR of the network\n- investor_valuation_based_token_price\n\t- Current perceived token valuation by the [[../Agents/Investors]]\n- valuation_cap\n\t- Current value of the total supply of tokens according to the [[../Agents/AMM]] marginal price\n- investor_valuation\n\t- Current yotal valuation of the project by the [[../Agents/Investors]]\n- incentives\n\t- Incentives given by the treasury to the [[../Agents/Operators]] in the [[Operators/Distribute rewards]] part of the current step\n- incentives_ratio\n\t- Ratio of tokens given by the [[../Agents/Treasury]] to the [[../Agents/Operators]] for each token that the [[../Agents/Treasury]] should have gotten in the [[Operators/Distribute rewards]] part of the current step\n- average_sessions_per_worker\n\t- Average number of concurrent sessions for each node in the current step","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Minting/Mint-tokens":{"title":"","content":"# Mint tokens\n\nEvery minting epoch (e.g. one day), the contract mints an amount of tokens that may depend on the total amount of tokens burnt since the previous minting epoch.\n\nThis behaviour, including the length of the epoch, is part of the design of the tokenomics, and has been parameterized in various design parameters. There are multiple minting options in the simulation to choose from, defined below.\n\n## Constant deflation rate\n\nThe minted amount is a constant ratio of the burnt amount since the last minting epoch.\n\n$$\nM(B) = r B\n$$\n\nwhere\n * $M$: Amount of tokens to be minted this epoch\n * $B$: Burnt tokens since last minting\n * $r$: Deflation rate\n\n\n## Asymptotic total supply\n\nThe minted amount targets a final amount of total supply to be reached asymptotically.\n\n$$\nM(B) = \\left( 1 - \\dfrac{T-T_f}{T_i - T_f} \\cdot \\left( 1 - r_i \\right) \\right) \\cdot B\n$$\n\nwhere\n * $M$: Amount of tokens to be minted this epoch\n * $B$: Burnt tokens since last minting\n * $r_i$: Deflation rate at the TGE initial total supply\n * $T$: Current total supply\n * $T_i$: Initial total supply\n * $T_f$: Final total supply (target)\n## Asymptotic mint rate (reused formula)\n\nCurrent value -\u003e $v$\n\nCrosspoint value -\u003e $v_c$\n\nInitial minting rate -\u003e $r_0$\n\nFinal minting rate -\u003e $r_f$\n\nValue ratio -\u003e $v_r(v) = \\frac{v}{v_c}$\n\n$$\nr(v) = \\frac{v_r(v)}{1 + v_r(v)} (r_f - r_0) + r_0\n$$\n\n## Market cap dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nMarket cap crosspoint -\u003e $C_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = C$, $v_c = C_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMintrate\n$$\nM(C,B) = r(C)\\cdot B\n$$\n\n## Burnt tokens dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nBurnt tokens crosspoint -\u003e $B_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = B$, $v_c = B_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMinting\n$$\nM(B) = r(B) \\cdot B\n$$\n\n## Time dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nTime crosspoint -\u003e $t_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = t$, $v_c = t_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMinting\n$$\nM(t,B) = r(t) \\cdot B\n$$\n\n## Time dependent mint rate\n\nTime crosspoint -\u003e $t_c$\n\nInitial mint rate -\u003e $M_0$\n\nFinal mint rate -\u003e $M_f$\n\nAsymptotic mint rate where $v=t$, $v_c = t_c$, $r_0 = M_0$ and $r_f = M_f$\n\nMinting\n$$\nM(t) = r(t)\n$$\n\n## Constant mint rate\n\nMint rate -\u003e $M$\n\nMinting\n$$\nM(t) = M\n$$\n\n## Constant deflation rate with minimum\n\nMinimum mint rate -\u003e $M$\n\nBurnt tokens since last minting -\u003e $B$\n\nDeflation rate -\u003e $r$\n\nMinting\n$$\nM(B) = \\max \\{M, rB\\}\n$$\n\n## Split minting calculator\n\nMinting calculators -\u003e $\\{M_i\\}$\n\nStarting times -\u003e $\\{t_i\\}$\n\nMinting calculator contribution\n- $t \u003e t_i ; t \u003c t_{i+1}$\n\t- $c_i = 1$\n- else\n\t- $c_i = 0$\n\nMinting calculator\n$$\nM = \\sum c_iM_i\n$$\n\n## Transitioning minting calculator\n\nMinting calculators -\u003e $\\{M_i\\}$\n\nStarting times -\u003e $\\{t_i\\}$\n\nRelaxation time -\u003e $\\Delta t_r$\n\nMinting calculator contribution\n\n- $t \u003e t_{i-i}; t \u003c t_i; t \u003e t_i - \\Delta t_r$\n\t- $c_i = \\frac{t_i - t}{\\Delta t_r}$\n- $t \u003e t_t;t \u003e t_{i+1} - \\Delta t_r$\n\t- $c_i=\\frac{t-(t_{i+1}-\\Delta t_r)}{\\Delta t_r}$\n- $t \u003e t_i;t\u003ct_{i+1}-\\Delta t_r$\n\t- $c_i=1$\n- else\n\t- $c_i=0$\n\nMinting calculator\n$$\nM = \\sum c_iM_i\n$$\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Minting/Minting-calculator":{"title":"","content":"## Constant deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nDeflation rate -\u003e $r$\n\nMinting\n$$\nM(B) = r B\n$$\n\n## Asymptotic mint rate (reused formula)\n\nCurrent value -\u003e $v$\n\nCrosspoint value -\u003e $v_c$\n\nInitial minting rate -\u003e $r_0$\n\nFinal minting rate -\u003e $r_f$\n\nValue ratio -\u003e $v_r(v) = \\frac{v}{v_c}$\n\n$$\nr(v) = \\frac{v_r(v)}{1 + v_r(v)} (r_f - r_0) + r_0\n$$\n\n## Market cap dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nMarket cap crosspoint -\u003e $C_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = C$, $v_c = C_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMintrate\n$$\nM(C,B) = r(C)\\cdot B\n$$\n\n## Burnt tokens dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nBurnt tokens crosspoint -\u003e $B_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = B$, $v_c = B_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMinting\n$$\nM(B) = r(B) \\cdot B\n$$\n\n## Time dependent deflation rate\n\nBurnt tokens since last minting -\u003e $B$\n\nTime crosspoint -\u003e $t_c$\n\nInitial mint ratio -\u003e $m_0$\n\nFinal mint ratio -\u003e $m_f$\n\nAsymptotic mint rate where $v = t$, $v_c = t_c$, $r_0 = m_0$ and $r_f = m_f$\n\nMinting\n$$\nM(t,B) = r(t) \\cdot B\n$$\n\n## Time dependent mint rate\n\nTime crosspoint -\u003e $t_c$\n\nInitial mint rate -\u003e $M_0$\n\nFinal mint rate -\u003e $M_f$\n\nAsymptotic mint rate where $v=t$, $v_c = t_c$, $r_0 = M_0$ and $r_f = M_f$\n\nMinting\n$$\nM(t) = r(t)\n$$\n\n## Constant mint rate\n\nMint rate -\u003e $M$\n\nMinting\n$$\nM(t) = M\n$$\n\n## Constant deflation rate with minimum\n\nMinimum mint rate -\u003e $M$\n\nBurnt tokens since last minting -\u003e $B$\n\nDeflation rate -\u003e $r$\n\nMinting\n$$\nM(B) = \\max \\{M, rB\\}\n$$\n\n## Split minting calculator\n\nMinting calculators -\u003e $\\{M_i\\}$\n\nStarting times -\u003e $\\{t_i\\}$\n\nMinting calculator contribution\n- $t \u003e t_i ; t \u003c t_{i+1}$\n\t- $c_i = 1$\n- else\n\t- $c_i = 0$\n\nMinting calculator\n$$\nM = \\sum c_iM_i\n$$\n\n## Changing minting calculator\n\nMinting calculators -\u003e $\\{M_i\\}$\n\nStarting times -\u003e $\\{t_i\\}$\n\nRelaxation time -\u003e $\\Delta t_r$\n\nMinting calculator contribution\n\n- $t \u003e t_{i-i}; t \u003c t_i; t \u003e t_i - \\Delta t_r$\n\t- $c_i = \\frac{t_i - t}{\\Delta t_r}$\n- $t \u003e t_t;t \u003e t_{i+1} - \\Delta t_r$\n\t- $c_i=\\frac{t-(t_{i+1}-\\Delta t_r)}{\\Delta t_r}$\n- $t \u003e t_i;t\u003ct_{i+1}-\\Delta t_r$\n\t- $c_i=1$\n- else\n\t- $c_i=0$\n\nMinting calculator\n$$\nM = \\sum c_iM_i\n$$\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Network/Daily-revenue":{"title":"","content":"$$\nr = U \\cdot P_c\n$$","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Operators/Centralized-node-management":{"title":"","content":"# Centralized node management\n\nIt is assumed that AUKI Labs will maintain a certain number of centralized nodes in the network, and that the number of decentralized nodes will be adjusted to maintain a certain ratio of decentralized nodes to centralized nodes.\n\nTherefore, at every time step where the number of decentralized nodes changes, the number of centralized nodes will be updated accordingly.\n\nAdditionally, at the TGE there is an initial base number of centralized nodes, which will be maintained throughout the simulation.\n\n## Calculation\n\nThe desired number of centralized nodes is calculated as follows:\n\n$$\nN_{c, desired} = \\dfrac{r_{c}}{1 - r_{c}} \\cdot N_{d}\n$$\n\nwhere\n * $N_{c, desired}$ is the desired number of centralized nodes\n * $r_{c}$ is the desired ratio of centralized nodes to decentralized nodes\n * $N_{d}$ is the current number of decentralized nodes\n\nTo maintain the minimum number of centralized nodes, the desired number of centralized nodes is compared to the minimum number of centralized nodes:\n\n$$\nN_{c} = \\max \\left(N_{c, desired}, N_{c, min} \\right)\n$$\n\nwhere\n * $N_{c}$ is the number of centralized nodes\n * $N_{c, desired}$ is the desired number of centralized nodes\n * $N_{c, min}$ is the minimum (initial) number of centralized nodes\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Operators/Distribute-rewards":{"title":"","content":"# Distribute rewards\n\nThe amount of tokens minted in an epoch is distributed to the treasury and the operators. \nThe ratio of the tokens that go to the operators is determined by the Hagall rewards ratio design parameter.\n\nAn additional ammount might go to the operators from the treasury as incentives, intended to encourage new participants to join the network.\nFor the purposes of the simulation, this option is activated whenever the number of operators is below a threshold number of concurrent sessions per worker, in order to avoid the network reaching a state where there are not enought operators to serve all the traffic.\n\n## Calculation\n\nThe amount delivered to the treasury is:\n\n$$\nD_t = M \\cdot (1 - r_o)\n$$\n\nwhere\n * $D_t$ is the amount of tokens delivered to the treasury\n * $M$ is the amount of tokens minted in the epoch\n * $r_o$ is the Hagall operators rewards ratio\n\nFrom that amount, the treasury might decide to deliver extra incentives towards the operators:\n\n$$\nD_i = r_i \\cdot D_t\n$$\n\nwhere\n * $D_i$ is the amount of tokens delivered to the operators as incentives\n * $r_i$ is the Hagall incentives ratio\n\nThe $r_i$ parameter is calculated as follows in the simulation:\n\n$$\nr_i = \\max \\left(0, \\min \\left( r_{i, max}, r_{i, max} \\cdot \\dfrac{S_w - S_{w, threshold}}{S_{w, maxincentives} - S_{w, threshold}}  \\right) \\right)\n$$\n\nwhere\n * $r_i$ is the Hagall incentives ratio\n * $r_{i, max}$ is the Hagall incentives ratio maximum\n * $S_w$ is the current number of concurrent sessions per worker\n * $S_{w, threshold}$ is the minimum number of concurrent sessions per worker at which incentives are activated\n * $S_{w, maxincentives}$ is the number of concurrent sessions per worker at which incentives reach their maximum\n\nFinally, the amount from which operator rewards will be calculated is:\n\n$$\nD_o = M \\cdot r_o + D_i\n$$\n\nwhere\n * $D_o$ is the amount of tokens delivered to the operators\n * $D_i$ is the amount of tokens delivered to the operators as additional incentives from the treasury\n * $r_o$ is the Hagall operators rewards ratio\n\nRewards are distributed to the operators according to their participation in the network and the service they provided.\n\nThe amount of tokens delivered to each operator are divided between service and participation rewards:\n\n$$\nD_{o, i} = D_o \\cdot \\left(\\dfrac{T_{o, i}}{T_o} \\cdot r_{o, service} + \\dfrac{1}{N} \\cdot (1- r_{o, service})  \\right)\n$$\n\nwhere\n * $D_{o, i}$ is the amount of tokens delivered to operator $i$\n * $D_o$ is the amount of tokens delivered to the operators\n * $T_{o, i}$ is the traffic served by operator $i$\n * $T_o$ is the total traffic served by all the operators\n * $N$ is the number of operators\n * $r_{o, service}$ is the Hagall operators rewards ratio for service (as opposed to participation)\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Operators/Evaluate-operator-profits":{"title":"","content":"# Evaluate operator profits\n\nOnce new rewards have been distributed, operators sell the token in order to cover their costs and make a profit. They evaluate their profits or losses and some decide whether to leave the network or not.\n\nAdditionally, if prospective profits are attractive, new operators might want to join the network. This is modeled as the potential yield, calculated as the yearly profit from an initial investment equivalent to the staking amount.\n\n## Calculation\n\nFirst, we take into account the from selling the token delivered as rewards on the aggregated AMM that emulates the market in order to calculate the profits, as well as the costs from running the nodes.\n\n$$\nP_{o} = E_{o} - C_{o}\n$$\n\nwhere\n * $P_{o}$ is the profit per operator\n * $E_{o}$ is the earnings per operator from the sale of the token (incluing any possible slippage on the AMM)\n * $C_{o}$ is the costs per operator\n\n$C_{o}$ is calculated takes into account fixed costs and variable (network) costs.\n\n$$\nC_{o} = C_{o, fixed} + c_{o, network} \\cdot T_{o}\n$$\n\nwhere\n * $C_{o, fixed}$ are the fixed costs\n * $c_{o, network}$ are the variable costs per unit of traffic served\n * $T_{o}$ is the traffic served per operator\n\nIf $P_{o} \u003e 0$, operators are, on average, profitable and will continue to operate. Otherwise, if $P_{o} \u003c 0$, some will leave the network. This is modeled linearly with the losses as:\n\n$$\n\\Delta N_{o} = r_e \\cdot P_{o} \\cdot \\Delta t\n$$\n\nwhere\n * $\\Delta N_{o}$ is the change in the number of operators\n * $r_e$ is the exit rate\n * $P_{o}$ is the profit per operator (negative in this case)\n * $\\Delta t$ is the time since the last profit evaluation\n\nOn the other hand, if $P_{o} \u003e 0$, new operators might want to join the network. This is modeled as the potential yield, calculated as the yearly profit from an initial investment equivalent to the staking amount. The yield is calculated as:\n\n$$\nY_{o} = \\frac{P_{o}}{S_{o}}\n$$\n\nwhere\n * $Y_{o}$ is the yield per operator\n * $P_{o}$ is the profit per operator\n * $S_{o}$ is the staking amount per operator (in dollars)\n\nThe amount of new operators is calculated as:\n\n$$\n\\Delta N_{o} = r_j \\cdot \\left(Y_{o} - Y_{minimum} \\right) \\cdot \\Delta t\n$$\n\nwhere\n * $\\Delta N_{o}$ is the change in the number of operators\n * $r_j$ is the join rate\n * $Y_{o}$ is the yield per operator\n * $Y_{minimum}$ is the minimum yield required to incentivize new operators to join\n * $\\Delta t$ is the time since the last profit evaluation\n\nIf new operators join the network, they purchase token from the AMM in order to stake it. If they leave, they sell the token in the AMM. The amount of token exchanged is calculated as:\n\n$$\n\\Delta T_{o} = \\Delta N_{o} \\cdot \\dfrac{S_{o}}{P}\n$$\n\nwhere\n * $\\Delta T_{o}$ is the change in the amount of token exchanged\n * $\\Delta N_{o}$ is the change in the number of operators\n * $S_{o}$ is the staking amount per operator (in dollars)\n * $P$ is the price of the token in dollars after the exchange\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Operators/Incentives-schedule":{"title":"","content":"Sessions per worker -\u003e $s$\nSessions per worker minimum incentivized -\u003e $s_0$\nSessions per worker maximum incentivized -\u003e $s_f$\nMax incentives ratio -\u003e $r_f$\n\n$s \u003c s_0$\n\t$r(s) = 0$\n$s \u003e s_f$\n\t$r(s) = r_f$\n$s \u003e s_0 ; s \u003c s_f$\n\t$r(s) = r_f \\frac{s - s_0}{s_f - s_0}$\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Step":{"title":"","content":"# Simulation step\n\nEach step advances the simulation by a time step, which is 6 hours by default.\n\n$$\nt_s = t_{s-1} + \\Delta t\n$$\n\nAfter that, a series events and actions meant to simulate the behavior of agents in the simulation environment are executed.\n\n![Diagram of the simulation loop that executes within a time step, along with the design parameters and hypotheses it depends on](AUKI_diagram.jpg)\n \n## Update of time-dependent variables\n\n1. [[DAUs/Update DAUs|Update DAUs]]: Update the number of daily active users (DAUs) in the AUKI Hagall network\n2. [[Vesting/Update vesting|Update vesting]]: Vest tokens for investors and the treasury according to their vesting schedules\n\n## Actions\n\n1. [[Liquidity/Update liquidity provision|Liquidity provision]]: Update the liquidity provision of the [[../Agents/AMM|AMM]] pool by investors and the treasury according to their target liquidity provision\n2. [[App developers/Staked tokens|App developers stake]]: Based on the serice they need to cover, app developers optmize their stake to get discounted prices on network credits\n3. [[Burning/Burn tokens|Burning]]: App developers burn tokens to get network credits\n4. [[Minting/Mint tokens|Minting]]: If the minting epoch has passed, mint tokens  \n5. [[Operators/Distribute rewards|Distribute Rewards]]: Rewards are distributed to operators according to their participation in the network and the service they provided\n6. [[Operators/Evaluate operator profits|Evaluate operator profits]]: Once new rewards have been distributed, evaluate the profits of worker operators. \n7. [[Operators/Evaluate operator profits|Update decentralized operators]]: Based on these profits (or losses), operators may decide to leave the network, or new operators may decide to join the network.\n8. [[Operators/Centralized node management|Centralized node management]]: AUKI Labs updates the numeber of centralized nodes based on the number of decentralized nodes in the network, targetting a certain ratio of centralized nodes\n9. [[Treasury/Treasury sales schedule|Treasury sales]]: the treasury sells tokens on the market to cover its expenses. For the purposes of the simulation, this happens according to a predefined schedule (yearly percentage of the current reserve)\n10. [[AMM/Operate token|Trading]]: investors buy and sell the token for the purposes of longing/shorting. \n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Treasury/Evaluate-the-market-equilibrium":{"title":"","content":"The [[../../Agents/Treasury]] makes sales to the [[../../Agents/AMM]] according to the [[Treasury sales schedule]] capped by the number of tokens the [[../../Agents/Treasury]] currently holds\n\nThe [[../../Agents/Investors]] buy/sell tokens according to their valuation and the [[../../Agents/AMM]] current token price\n\nThis is modified by the daily rebalancing ratio (hypothesis), the fraction of the day passed in the time step and the amount of tokens that the investors currently hold (when selling)\n\nThe investors then [[../AMM/Operate token]] for that amount\n\nThe amount of tokens held by the [[../../Agents/Investors]] is modified by their acquisitions","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Treasury/Treasury-sales-schedule":{"title":"","content":"# Treasury sales\n\nThe treasury sells tokens on the market to cover its expenses. For the purposes of the simulation, this happens according to a predefined schedule (yearly percentage of the current reserve)\n\n## Calculation\n\nThe amount of tokens to be sold is calculated as follows:\n\n$$\nS_t = T_t \\cdot \\left(1 - \\left(1 - r_{s, anual} \\right)^{\\Delta t / \\text{seconds in a year}} \\right)\n$$\n\nwhere\n * $S_t$ is the amount of tokens sold in time step $t$\n * $T_t$ is the amount of tokens in the treasury in time step $t$\n * $r_{s, anual}$ is the anual ratio of tokens to be sold\n * $\\Delta t$ is the time step\n\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null},"/Structure/Take-step/Vesting/Update-vesting":{"title":"","content":"# Vesting schedule\n\nThe simulation considers vesting schedules for some investors and for the treasury. \nEach simulation step, the amount vested since the last step is calculated and added to the corresponding balance.\n\nAll schedules follow the same formulae:\n\nCliff time -\u003e $\\Delta t_c$\n\nVesting time -\u003e $\\Delta t_v$\n\nTotal vesting amount -\u003e $v_t$\n\nVesting start time -\u003e $t_0$\n\n$t \u003c t_0 + \\Delta t_c$\n$$\nv(t) = 0\n$$\n$t \\ge t_0 + \\Delta t_c ; t \u003c t_0 + \\Delta t_v$\n$$\nv(t) = \\frac{v_t \\cdot \\Delta t_v}{t - t_0}\n$$\n$t \\ge t_0 + \\Delta t_v$\n$$\nv(t) = v_t\n$$\n\nTaking this into account, the vested amount in each step is calculated by integration from the last step to the current one:\n\n$$\nV(t) = \\int v(t) dt\n$$\n","lastmodified":"2023-01-10T11:47:40.298778944Z","tags":null}}